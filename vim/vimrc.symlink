" Make the background behave better in tmux
set term=screen-256color

" Leader
let mapleader = " "

set backspace=2   " Backspace deletes like most programs in insert mode
set nocompatible  " Use Vim settings, rather then Vi settings
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set cursorline    " turn on highlighting of the current line
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set noshowmode    " Hide the default mode text (e.g. -- INSERT -- below the statusline
set autowrite     " Automatically :write before running commands
set lazyredraw    " Don't redraw while executing macros (good performance config)
set ttimeoutlen=50 "Make leaving insert mode faster
set ignorecase    " Ignore case when searching
set smartcase     " Make search pattern case sensitive iff starts with capital
set magic         " Turn regular expressions on in searching
set hidden        " Hide buffer when abandoned
set nowrap        " Turn off text wrapping
set clipboard=unnamed " Uses system clipboard as clipboard
set mouse=a       " Enable mouse support
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc " Ignore certain files, esp for CtrlP
set hlsearch      " Turn on search highlighting
if has('mouse_sgr')
    set ttymouse=sgr " Allows clicking past a certain column in VIM
endif

" Setup colorscheme
let g:rehash256 = 1
hi clear
colorscheme molokai
syntax on

filetype off     " required for Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

" The following are examples of different formats supported.
" Keep bundle commands between here and filetype plugin indent on.
" scripts on GitHub repos
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'airblade/vim-gitgutter'

call vundle#end()
filetype plugin indent on

" Airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s│ '
let g:airline_theme='powerlineish'

set guifont=Meslo\ LG\ S\ DZ\ for\ Powerline:h14
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=vert:\│,stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8

augroup vimrcEx
  autocmd!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
augroup END

" Softtabs, 4 spaces, make tabs automatically go to right place instead of fixed width
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

set ai "Auto indent
set si "Smart indent

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Highlight characters past 80chars
if exists('&colorcolumn')
    set colorcolumn=81
else
    2mat ErrorMsg '\%81v.'
endif

" Numbers
set number
set numberwidth=5

" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Open NERDTree with leader-n
nnoremap <leader>n :NERDTreeToggle<CR>

" Buffer navigation
nnoremap <leader>c  :bp\|bd #<CR>
nnoremap <leader>l  :bnext<CR>
nnoremap <leader>h  :bprevious<CR>

" Swap ; and :  Convenient.
nnoremap ; :
nnoremap : ;

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Map <Leader>p to paste with no auto-indent
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" Press return to get out of highlighting
:nnoremap <CR> :nohlsearch<CR><CR>

" Make # indent correctly under smart indenting
:inoremap # X#
