set nocompatible                " Use Vim settings, rather then Vi settings.  This overrides settings, so do it first!

" Terminal-related settings.
let &termencoding=&encoding
set encoding=utf-8
set guifont=Meslo\ LG\ S\ DZ\ for\ Powerline:h14
set fillchars+=vert:\│,stl:\ ,stlnc:\ 
set lazyredraw                  " Don't redraw while executing macros (good performance config).
set visualbell                  " Use visual bell instead of beeping.
set sessionoptions-=options

" Input settings.
set nowrap                      " Don't visually wrap long lines.
set backspace=indent,eol,start  " Backspace deletes like most programs in insert mode.
set scrolloff=5                 " Minimal number of screen lines to keep above and below the cursor.
set timeoutlen=1000             " Make leaving insert mode faster.
set ttimeoutlen=0               " Make leaving insert mode faster.
set textwidth=79
if exists('&colorcolumn')
    set colorcolumn=80
else
    2mat ErrorMsg '\%80v.'
endif

" Miscellaneous display settings.
set hidden                      " Hide buffer when abandoned.
set splitbelow splitright       " Open new split panes to right and bottom, which feels more natural.
set list listchars=tab:»·,trail:· " Display extra whitespace and tabs.

" Ignore certain files, esp. for Ctrl-P.
set wildignore+=*/tmp/*,*.swp   " Useless temp files.
set wildignore+=*.zip           " Editing archives doesn't make much sense.
set wildignore+=*.so            " Ignore compiled C/C++ files.
set wildignore+=*.pyc,*.pyo     " Ignore compiled Python files.

" Swap file settings.
set nowritebackup
set noswapfile                  " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287

" On-screen settings.
set ruler                       " Show the cursor position all the time.  Does nothing in vim-airline.
set laststatus=2                " Always display the status line.  Necessary for vim-airline.
set noshowmode                  " Don't show the -- INSERT -- style text, vim-airline takes care of that.
set number numberwidth=5        " Line numbers.
set cursorline                  " Turn on highlighting of the current line.
set signcolumn=number           " Display signs in number column

" Search settings.
set incsearch                   " Show where the current search pattern matches while it is being typed.
set ignorecase                  " Ignore case when searching.
set smartcase                   " Make search pattern case sensitive iff starts with capital.
set hlsearch                    " Turn on search highlighting.

" Mouse settings.
set mouse=a                     " Enable mouse support.
if exists(':ttymouse') && has('mouse_sgr')
    set ttymouse=sgr            " Allows clicking past a certain column.
endif

" Clipboard settings.
if has('clipboard')
    set clipboard=unnamed       " Uses system clipboard as clipboard.

    if has('unnamedplus')       " X11 support.
        set clipboard+=unnamedplus
    endif
endif

" Tab/indent settings.
set tabstop=4                   " Number of spaces that each <Tab> counts for.
set shiftwidth=4                " Number of spaces used for each autoindent, used for >>, <<.
set smarttab                    " <Tab> at front of line inserts <shiftwidth> spaces instead of <tabstop>.
set expandtab                   " Insert spaces with <Tab> instead of a <Tab>.
set autoindent                  " Copy indent from current line when starting a new line.
if exists('&breakindent')
    set breakindent             " Indent wrappped lines to the same level.
endif

" Parser settings.
set modelines=0
set nomodeline

" Set the leader to space.
let mapleader = " "

" Setup colorscheme
set termguicolors
hi clear
colorscheme molokai
syntax on

" Force new regex engine for yats.vim
set re=0

" Dein plugins!

set runtimepath+=~/.vim/bundle/repos/github.com/Shougo/dein.vim
if dein#load_state('~/.vim/bundle')
  call dein#begin('~/.vim/bundle')

  " Let Dein manage Dein, required.
  call dein#add('~/.vim/bundle/repos/github.com/Shougo/dein.vim')

  call dein#add('Valloric/ListToggle')
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#add('junegunn/fzf', { 'build': './install --no-completion --no-key-bindings --no-update-rc', 'merged': 0 })
  call dein#add('junegunn/fzf.vim', { 'depends': 'fzf' })
  call dein#add('mhinz/vim-signify')
  call dein#add('nathanaelkane/vim-indent-guides')
  call dein#add('neoclide/coc.nvim', { 'rev': 'release' })
  call dein#add('scrooloose/nerdtree')
  call dein#add('tiagofumo/vim-nerdtree-syntax-highlight')
  call dein#add('tomtom/tcomment_vim')
  call dein#add('tpope/vim-fugitive')
  call dein#add('tpope/vim-obsession')
  call dein#add('tpope/vim-surround')
  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')

  " Language specific extensions.
  call dein#add('LaTeX-Box-Team/LaTeX-Box')
  call dein#add('sheerun/vim-polyglot')

  call dein#end()
  call dein#save_state()
endif

" Required
filetype plugin indent on

if dein#check_install()
  call dein#install()
endif

" neovim python settings
let g:python3_host_prog = '/usr/local/bin/python3'
let g:loaded_python_provider = 1

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s│ '
let g:airline_theme='powerlineish'

" FZF settings
let g:fzf_colors =
\ { 'fg':         ['fg', 'Normal'],
  \ 'bg':         ['bg', 'Normal'],
  \ 'preview-bg': ['bg', 'NormalFloat'],
  \ 'hl':         ['fg', 'Comment'],
  \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':        ['fg', 'Statement'],
  \ 'info':       ['fg', 'PreProc'],
  \ 'border':     ['fg', 'Ignore'],
  \ 'prompt':     ['fg', 'Conditional'],
  \ 'pointer':    ['fg', 'Exception'],
  \ 'marker':     ['fg', 'Keyword'],
  \ 'spinner':    ['fg', 'Label'],
  \ 'header':     ['fg', 'Comment'] }

" NERDTree settings
let g:NERDTreeIgnore = ['\.pyc$', '\.o$', '\.dep$']

" NERDTree syntax highlight settings
let g:NERDTreeLimitedSyntax = 1
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" CoC settings
let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-tsserver',
  \ 'coc-svelte',
  \ ]
if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif
if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

" vim-indent-guides settings
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 4

" LaTeX-Box settings
let g:LatexBox_latexmk_async = 1                " Need this on so the quickfix automatically appears on error
let g:LatexBox_latexmk_preview_continuously = 1 " Runs latexmk with -pvc so it watches the .tex file
let g:LatexBox_quickfix = 2                     " Opens a quickfix window with errors but does not draw focus
let g:LatexBox_viewer = 'open -a skim'

" vim-polyglot settings
let g:vim_svelte_plugin_use_typescript = 1

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  autocmd FileType markdown setlocal spell
  autocmd FileType tex setlocal spell
augroup END

function! s:fzf_root()
  let path = finddir(".git", expand("%:p:h").";")
  return fnamemodify(substitute(path, ".git", "", ""), ":p:h")
endfunction

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Open NERDTree with leader-n
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>N :NERDTreeFind<CR>

" CoC mappings
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> gh :call CocActionAsync('doHover')<cr>

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup CocGroup
  autocmd!
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Swap ; and :  Convenient.
nnoremap ; :
nnoremap : ;

" Use K to easily search for a word in the project
nnoremap <silent> K :Rg \b<C-r>=expand('<cword>')<CR>\b<CR>
vnoremap <silent> K y:Rg \b<C-R>"\b<CR>
noremap <C-n> :cn<CR>
noremap <C-m> :cp<CR>

" Quicker buffer movement
noremap <S-h> :bp!<CR>
noremap <S-l> :bn!<CR>
nnoremap <leader>c  :bp\|bd #<CR>

" Map <Leader>p to paste with no auto-indent
nnoremap <leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" Press return to get out of highlighting
nnoremap <silent> <CR> :nohlsearch<CR><CR>

nnoremap <C-t> :exe 'Files ' . <SID>fzf_root()<CR>
" :Find command
command -nargs=+ Find Rg <args>
